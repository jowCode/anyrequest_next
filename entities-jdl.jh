
/**
* A user can make a request
* This request can be seen by all other users
* Any other user can make an contribution proposal to that request
* The contributing user can have a chat with the requesting user if he approved the contribution
**/
enum Urgency {
	HIGH,
    MEDIUM,
    LOW
}

entity UserRequest {
	title String required,
    description String required,
    urgency Urgency required,
    validTo ZonedDateTime required,
    contributorCount Integer required min(0)
}

relationship ManyToOne {
	UserRequest{user} to User
}

enum ContributionStatus {
	PENDING,
    APPROVED,
    REJECTED
}

entity Contribution {
	contributionMessage String required,
    contributionStatus ContributionStatus
}

relationship OneToMany {
	UserRequest to Contribution
}

relationship ManyToOne {
	Contribution{user} to User
}

DEFAULT_BALANCE = 0

entity UserCreditAccount {
	receivedCredits Integer required min(DEFAULT_BALANCE),
    usedCredits Integer required min(DEFAULT_BALANCE),
    totalCredits Integer required min(DEFAULT_BALANCE)
}

relationship OneToOne {
	UserCreditAccount to User
}

entity Conversation {
}

entity ChatMessage {
	message String required
}
relationship OneToMany {
	Conversation to ChatMessage
}

relationship ManyToOne {
	ChatMessage{user} to User
}

relationship OneToOne {
	Contribution to Conversation
}
service all with serviceClass
paginate UserRequest with infinite-scroll
paginate Message with infinite-scroll
paginate Conversation with pagination
paginate UserCreditAccount with pagination
